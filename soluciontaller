Variables y operaciones
1️⃣ Responde las siguientes preguntas en la sección de comentarios:
¿Qué es una variable y para qué sirve?
R./
Una variable en JavaScript es un contenedor para almacenar valores que pueden ser reutilizados y cambiados durante la ejecución
del programa. Es la unidad básica de almacenamiento en un programa. El valor almacenado en una variable puede cambiar durante la 
ejecución del programa. Una variable es solo un nombre dado a una ubicación de memoria, todas las operaciones realizadas en la
variable afectan esa ubicación de memoria.
Fuente: https://www.w3schools.com/js/js_variables.asp

¿Cuál es la diferencia entre declarar e inicializar una variable?
una variable se puede crear usando la palabra reservada var o la palabra reservada let, let es mas usado actualmente
por ejemplo una variable que cuente la cantidad de veces que late el corazón durante 10 segundos la podríamos llamar pulso.

let pulso; // esta intrucción es la declaración de la variable
let pulso=10; // esta instrucción es la inicializació de la variable diez con un valor numérico de 10

¿Cuál es la diferencia entre sumar números y concatenar strings?

en javascript usemos el ejemplo de una operación de sumar dos valores llamados notas
nota1=4.6
nota2=4.5
nota3=4.2
nota4=1.2
si requiero saber el promedio de las notas sumo todas las notas y ese resultado lo divido entre la cantidad de notas en teste caso
son cuatro notas
entonces creamos las variables para las notas

let nota1=4.6;
let nota2=4.5;
let nota3=4.2;
let nota4=1.2;
let promedio=(nota1+nota2+nota3+nota4)/4
console.log(promedio); en este caso el resultado es 3.625

Pero si usamos comillas que se usan para valores de cadenas de texto o strings entonces el resultado será:
let nota1="cuatro punto 6"
let nota2="cuatro punto 5"
let suma=nota1+nota2;
console.log(suma); //en este caso el resultado es cuatro punto 6cuatro punto 5

¿Cuál operador me permite sumar o concatenar?
según los ejercicios anteriores el operador para sumar y concatenar es +

2️⃣ Determina el nombre y tipo de dato para almacenar en variables la siguiente información:
Nombre de variable            :      Tipo de dato de variable
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Nombre                        : string
Apellido                      : string
Nombre de usuario en Platzi   : string
Edad                          : numérico
Correo electrónico            : string
Mayor de edad                 : booleano
Dinero ahorrado               : numérico
Deudas                        : numérico

3️⃣ Traduce a código JavaScript las variables del ejemplo anterior y deja tu código en los comentarios.
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
let Nombre="Felipe";// variable de tipo de dato string
let Apellido="Cruz";// variable de tipo de dato string
let nombrecompleto;// variable de tipo de dato string
let Edad;// variable de tipo de dato numérico
let correelectronico // variable de tipo de dato string
let mayordeedad; // variable de tipo de dato booleano
let Dineroahorrado=10000000000000;// variable de tipo de dato numérico
let deudas=1;// variable de tipo de dato numérico

4️⃣ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
let nombrecompleto=Nombre+" "+Apellido;
let Dineroreal=dineroahorrado-deudas;

Funciones
1️⃣ Responde las siguientes preguntas en la sección de comentarios:
¿Qué es una función?
Una función en JavaScript es un bloque de código diseñado para realizar una tarea en particular. Una función en JavaScript se
ejecuta cuando algo la invoca (la llama). Una función en JavaScript es similar a un procedimiento: un conjunto de declaraciones 
que realiza una tarea o calcula un valor, pero para que un procedimiento califique como una función, debe tomar alguna entrada y
devolver una salida donde haya alguna relación obvia entre la entrada y la salida
fuente: 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions

¿Cuándo me sirve usar una función en mi código?
Cuando deba reusar bloques de instrucciones que requieran la misma información o de variables dentro de un programa, una 
función es muy util para evitar repetir información.

¿Cuál es la diferencia entre parámetros y argumentos de una función?
parámetros son variables que se declaran en la estructura de la función y los argumentos ya son valores que se asignarían a esos parámetros


2️⃣ Convierte el siguiente código en una función, pero, cambiando cuando sea necesario las variables constantes por parámetros y argumentos en una función:
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
function nombreyalias()
{
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
};
nombreyalias();

Condicionales
1️⃣ Responde las siguientes preguntas en la sección de comentarios:
¿Qué es un condicional?
Es una estructura de desición que permite controlar la ejecución de una o varias instrucciones a partir del cumplimiento de una condición.

¿Qué tipos de condicionales existen en JavaScript y cuáles son sus diferencias?
if: se usa para especificar un bloque de código que se ejecutará si una condición especificada es verdadera.
else: se usa para especificar un bloque de código que se ejecutará si la misma condición es falsa.
else if: se usa para especificar una nueva condición a evaluar si la primera condición es falsa.
switch: se usa para seleccionar uno de varios bloques de código que se ejecutarán.

fuente:https://www.javascript.com/learn/conditionals


¿Puedo combinar funciones y condicionales?
2️⃣ Replica el comportamiento del siguiente código que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un año");
       break;
   case "ExpertPlus":
       console.log("Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año");
       break;
}
3️⃣ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
💡 Bonus: si ya eres una experta o experto en el lenguaje, te desafío a comentar cómo replicar este comportamiento con arrays u objetos y un solo condicional. 😏

Ciclos
1️⃣ Responde las siguientes preguntas en la sección de comentarios:
¿Qué es un ciclo?
¿Qué tipos de ciclos existen en JavaScript?
¿Qué es un ciclo infinito y por qué es un problema?
¿Puedo mezclar ciclos y condicionales?
2️⃣ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}
3️⃣ Escribe un código en JavaScript que le pregunte a los usuarios cuánto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
💡 Pista: puedes usar la función prompt de JavaScript.

Listas
1️⃣ Responde las siguientes preguntas en la sección de comentarios:
¿Qué es un array?
¿Qué es un objeto?
¿Cuándo es mejor usar objetos o arrays?
¿Puedo mezclar arrays con objetos o incluso objetos con arrays?
2️⃣ Crea una función que pueda recibir cualquier array como parámetro e imprima su primer elemento.
3️⃣ Crea una función que pueda recibir cualquier array como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
4️⃣ Crea una función que pueda recibir cualquier objeto como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
